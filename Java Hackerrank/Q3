import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'jumps' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER flagHeight
     *  2. INTEGER bigJump
     */

    public static int jumps(int flagHeight, int bigJump) {
    int minJumps=0;
    int moduloJumps=0;
    int totalBigJumps=0;
        if(flagHeight%bigJump==0){
            minJumps= flagHeight / bigJump;
        }else if(flagHeight%bigJump>=0){
            totalBigJumps= flagHeight/bigJump;
            moduloJumps= (flagHeight%bigJump)/1;
            minJumps= (totalBigJumps+moduloJumps);
        }return minJumps;
    }//my code ends here

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int flagHeight = Integer.parseInt(bufferedReader.readLine().trim());

        int bigJump = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.jumps(flagHeight, bigJump);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
